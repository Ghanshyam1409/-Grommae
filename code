# Grommae: Regression-Based Predictive Model Using Machine Learning
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Sample dataset (predicting house prices based on features like area and bedrooms)
data = {
    'Area': [1500, 1800, 2400, 3000, 3500, 4000, 4500, 5000, 5500, 6000],
    'Bedrooms': [3, 4, 3, 5, 4, 5, 6, 6, 7, 8],
    'Price': [400000, 500000, 600000, 650000, 700000, 800000, 850000, 900000, 950000, 1000000]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Features and target variable
X = df[['Area', 'Bedrooms']]  # Features
y = df['Price']  # Target

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Predictions on test set
y_pred = model.predict(X_test)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print evaluation results
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Plotting the results
plt.scatter(y_test, y_pred)
plt.xlabel('True Prices')
plt.ylabel('Predicted Prices')
plt.title('True vs Predicted Prices')
plt.show()
